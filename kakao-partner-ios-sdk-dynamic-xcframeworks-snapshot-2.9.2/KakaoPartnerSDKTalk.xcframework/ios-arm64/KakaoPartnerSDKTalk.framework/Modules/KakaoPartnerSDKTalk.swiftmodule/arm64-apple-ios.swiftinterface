// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KakaoPartnerSDKTalk
import Alamofire
import Foundation
import KakaoPartnerSDKCommon
@_exported import KakaoPartnerSDKTalk
import KakaoSDKAuth
import KakaoSDKCommon
import KakaoSDKTalk
import KakaoSDKTemplate
import Swift
import _Concurrency
public enum FriendType : Swift.String, Swift.Codable {
  case Talk
  case Story
  case TalkAndStory
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum FriendFilter : Swift.String, Swift.Codable {
  case None
  case Registered
  case Invitable
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChatFilter {
  case Direct
  case Multi
  case Regular
  case Open
  public var parameterValue: Swift.String {
    get
  }
  public static func == (a: KakaoPartnerSDKTalk.ChatFilter, b: KakaoPartnerSDKTalk.ChatFilter) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct PartnerFriend : Swift.Codable {
  public let appRegistered: Swift.Bool?
  public let id: Swift.Int64?
  public let serviceUserId: Swift.Int64?
  public let uuid: Swift.String
  public let profileNickname: Swift.String?
  public let profileThumbnailImage: Foundation.URL?
  public let talkOs: Swift.String?
  public let allowedMsg: Swift.Bool?
  public let relation: KakaoPartnerSDKTalk.FriendRelation?
  public let favorite: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum FriendRelationType : Swift.String, Swift.Codable {
  case Friend
  case NoFriend
  case NA
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct FriendRelation : Swift.Codable {
  public let talk: KakaoPartnerSDKTalk.FriendRelationType?
  public let story: KakaoPartnerSDKTalk.FriendRelationType?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PartnerFriendsContext {
  public let friendType: KakaoPartnerSDKTalk.FriendType?
  public let friendFilter: KakaoPartnerSDKTalk.FriendFilter?
  public let friendOrder: KakaoSDKTalk.FriendOrder?
  public let offset: Swift.Int?
  public let limit: Swift.Int?
  public let order: KakaoSDKTalk.Order?
  public let countryCodes: [Swift.String]?
  public init(friendType: KakaoPartnerSDKTalk.FriendType? = nil, friendFilter: KakaoPartnerSDKTalk.FriendFilter? = nil, friendOrder: KakaoSDKTalk.FriendOrder? = nil, offset: Swift.Int? = nil, limit: Swift.Int? = nil, order: KakaoSDKTalk.Order? = nil, countryCodes: [Swift.String]? = nil)
  public init?(_ url: Foundation.URL?)
}
public struct ChatMembers : Swift.Codable {
  public let type: Swift.String
  public let members: [KakaoPartnerSDKTalk.Member]?
  public let activeMembersCount: Swift.Int?
  public let activeFriendsCount: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Member : Swift.Codable {
  public let appRegistered: Swift.Bool?
  public let id: Swift.Int64?
  public let uuid: Swift.String
  public let nickname: Swift.String?
  public let thumbnailImageUrl: Foundation.URL?
  public let msgBlocked: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Chats : Swift.Codable {
  public let totalCount: Swift.Int
  public let elements: [KakaoPartnerSDKTalk.Chat]?
  public let beforeUrl: Foundation.URL?
  public let afterUrl: Foundation.URL?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Chat : Swift.Codable {
  public let id: Swift.Int64
  public let title: Swift.String?
  public let imageUrl: Foundation.URL?
  public let memberCount: Swift.Int?
  public let displayMemberImages: [Foundation.URL]?
  public let chatType: Swift.String
  public let titleSource: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PartnerMessageSendResult : Swift.Codable {
  public let successfulReceiverIds: [Swift.String]?
  public let failureInfos: [KakaoPartnerSDKTalk.PartnerMessageFailureInfo]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PartnerMessageFailureInfo : Swift.Codable {
  public let code: Swift.Int
  public let msg: Swift.String
  public let receiverIds: [Swift.String]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension KakaoSDKTalk.TalkApi {
  public enum ReceiverIdType : Swift.String {
    case Uuid
    case UserId
    case ChatId
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func chatList(filters: [KakaoPartnerSDKTalk.ChatFilter]? = nil, offset: Swift.Int? = nil, limit: Swift.Int? = nil, order: KakaoSDKTalk.Order? = nil, completion: @escaping (KakaoPartnerSDKTalk.Chats?, Swift.Error?) -> Swift.Void)
  public func chatMembers(chatId: Swift.Int64, friendsOnly: Swift.Bool, includeProfile: Swift.Bool? = nil, token: Swift.String? = nil, completion: @escaping (KakaoPartnerSDKTalk.ChatMembers?, Swift.Error?) -> Swift.Void)
  public func sendDefaultMessageForPartner(templatable: KakaoSDKTemplate.Templatable, receiverIdType: KakaoSDKTalk.TalkApi.ReceiverIdType, receiverIds: [Any], completion: @escaping (KakaoPartnerSDKTalk.PartnerMessageSendResult?, Swift.Error?) -> Swift.Void)
  public func sendCustomMessageForPartner(templateId: Swift.Int64, templateArgs: [Swift.String : Any]? = nil, receiverIdType: KakaoSDKTalk.TalkApi.ReceiverIdType, receiverIds: [Any], completion: @escaping (KakaoPartnerSDKTalk.PartnerMessageSendResult?, Swift.Error?) -> Swift.Void)
  public func sendScrapMessageForPartner(requestUrl: Swift.String, templateId: Swift.Int64? = nil, templateArgs: [Swift.String : Any]? = nil, receiverIdType: KakaoSDKTalk.TalkApi.ReceiverIdType, receiverIds: [Any], completion: @escaping (KakaoPartnerSDKTalk.PartnerMessageSendResult?, Swift.Error?) -> Swift.Void)
  public func friendsForPartner(friendType: KakaoPartnerSDKTalk.FriendType? = nil, friendFilter: KakaoPartnerSDKTalk.FriendFilter? = nil, friendOrder: KakaoSDKTalk.FriendOrder? = nil, offset: Swift.Int? = nil, limit: Swift.Int? = nil, order: KakaoSDKTalk.Order? = nil, countryCodes: [Swift.String]? = nil, completion: @escaping (KakaoSDKTalk.Friends<KakaoPartnerSDKTalk.PartnerFriend>?, Swift.Error?) -> Swift.Void)
  public func friendsForPartner(context: KakaoPartnerSDKTalk.PartnerFriendsContext?, completion: @escaping (KakaoSDKTalk.Friends<KakaoPartnerSDKTalk.PartnerFriend>?, Swift.Error?) -> Swift.Void)
}
extension KakaoPartnerSDKTalk.FriendType : Swift.Equatable {}
extension KakaoPartnerSDKTalk.FriendType : Swift.Hashable {}
extension KakaoPartnerSDKTalk.FriendType : Swift.RawRepresentable {}
extension KakaoPartnerSDKTalk.FriendFilter : Swift.Equatable {}
extension KakaoPartnerSDKTalk.FriendFilter : Swift.Hashable {}
extension KakaoPartnerSDKTalk.FriendFilter : Swift.RawRepresentable {}
extension KakaoPartnerSDKTalk.ChatFilter : Swift.Equatable {}
extension KakaoPartnerSDKTalk.ChatFilter : Swift.Hashable {}
extension KakaoPartnerSDKTalk.FriendRelationType : Swift.Equatable {}
extension KakaoPartnerSDKTalk.FriendRelationType : Swift.Hashable {}
extension KakaoPartnerSDKTalk.FriendRelationType : Swift.RawRepresentable {}
extension KakaoSDKTalk.TalkApi.ReceiverIdType : Swift.Equatable {}
extension KakaoSDKTalk.TalkApi.ReceiverIdType : Swift.Hashable {}
extension KakaoSDKTalk.TalkApi.ReceiverIdType : Swift.RawRepresentable {}
