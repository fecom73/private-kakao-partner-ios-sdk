// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name KakaoPartnerSDKAuth
import Alamofire
import AuthenticationServices
import Foundation
@_exported import KakaoPartnerSDKAuth
import KakaoPartnerSDKCommon
import KakaoSDKAuth
import KakaoSDKCommon
import SafariServices
import Swift
import UIKit
import _Concurrency
extension KakaoSDKAuth.AuthApi {
  final public func token(groupRefreshToken: Swift.String? = nil, completion: @escaping (KakaoSDKAuth.OAuthToken?, Swift.Error?) -> Swift.Void)
  final public func verifyAge(authLevel: KakaoPartnerSDKAuth.AuthLevel? = nil, ageLimit: Swift.Int? = nil, skipTerms: Swift.Bool? = false, adultsOnly: Swift.Bool? = false, underAge: Swift.Bool? = false, completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension KakaoSDKAuth.AuthController {
  public func verifyAgeWithAuthenticationSession(authLevel: KakaoPartnerSDKAuth.AuthLevel? = nil, ageLimit: Swift.Int? = nil, skipTerms: Swift.Bool? = false, adultsOnly: Swift.Bool? = false, underAge: Swift.Bool? = false, completion: @escaping (Swift.Error?) -> Swift.Void)
}
extension Foundation.URL {
  public func ageOauthResult() -> Swift.Error?
}
public enum AgeAuthError : Swift.Error {
  case AgeAuthFailed(reason: KakaoPartnerSDKAuth.AgeAuthFailureReason, errorMessage: Swift.String?)
}
public enum AgeAuthFailureReason : Swift.Int {
  case Unknown
  case BadParameters
  case Unauthorized
  case NotAuthorizedAge
  case LowerAgeLimit
  case AlreadyAgeAuthorized
  case ExceedAgeCheckLimit
  case AgeAuthResultMismatch
  case CIResultMismatch
  case Error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension KakaoPartnerSDKAuth.AgeAuthError {
  public init(status: Swift.Int?, message: Swift.String? = nil)
}
public class PartnerAuthRequestRetrier : Alamofire.RequestInterceptor {
  public init()
  public func retry(_ request: Alamofire.Request, for session: Alamofire.Session, dueTo error: Swift.Error, completion: @escaping (Alamofire.RetryResult) -> Swift.Void)
  @objc deinit
}
public enum AuthLevel : Swift.String, Swift.Codable {
  case Level1
  case Level2
  public var parameterValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public let PARTNER_AUTH: KakaoPartnerSDKAuth.PartnerAuth
public class PartnerAuth {
  public static let shared: KakaoPartnerSDKAuth.PartnerAuth
  public init()
  public func initSession()
  public func responseData(_ HTTPMethod: Alamofire.HTTPMethod, _ url: Swift.String, parameters: [Swift.String : Any]? = nil, headers: [Swift.String : Swift.String]? = nil, apiType: KakaoSDKCommon.ApiType, completion: @escaping (Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> Swift.Void)
  @objc deinit
}
extension KakaoPartnerSDKAuth.AgeAuthFailureReason : Swift.Equatable {}
extension KakaoPartnerSDKAuth.AgeAuthFailureReason : Swift.Hashable {}
extension KakaoPartnerSDKAuth.AgeAuthFailureReason : Swift.RawRepresentable {}
extension KakaoPartnerSDKAuth.AuthLevel : Swift.Equatable {}
extension KakaoPartnerSDKAuth.AuthLevel : Swift.Hashable {}
extension KakaoPartnerSDKAuth.AuthLevel : Swift.RawRepresentable {}
